{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Linear Regression\n",
    "\n",
    "## 1) What is Regression?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We still will have x and y. What changes is that y, the variable that we are trying to predict, is a quantitative value.\n",
    "In classification, y was categorical.\n",
    "\n",
    "What is y this week? -> the amount of bike rentals (count)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2) What is Linear Regression?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Linear regression models the relationshop between X and y as linear. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.1) The Anscombe example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dataset</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>I</td>\n",
       "      <td>10.0</td>\n",
       "      <td>8.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>I</td>\n",
       "      <td>8.0</td>\n",
       "      <td>6.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>I</td>\n",
       "      <td>13.0</td>\n",
       "      <td>7.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>I</td>\n",
       "      <td>9.0</td>\n",
       "      <td>8.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>I</td>\n",
       "      <td>11.0</td>\n",
       "      <td>8.33</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  dataset     x     y\n",
       "0       I  10.0  8.04\n",
       "1       I   8.0  6.95\n",
       "2       I  13.0  7.58\n",
       "3       I   9.0  8.81\n",
       "4       I  11.0  8.33"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "ansc = sns.load_dataset(\"anscombe\")\n",
    "ansc.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['I', 'II', 'III', 'IV'], dtype=object)"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's check out how many datasets we have in the ansc DataFrame.\n",
    "ansc['dataset'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a20592710>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the data\n",
    "sns.scatterplot(data=ansc[ansc['dataset']=='I'], x='x', y='y')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x1a1fc9f910>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x360 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.lmplot(data=ansc, x='x', y='y', col='dataset', ci=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Does a linear regression make sense for all of the datasets?\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "it seems like the plotted line does not make equally sense for all of the datasets.\n",
    "\n",
    "I: seems to work fine\n",
    "\n",
    "II: does not look like a linear relationship but rather like a squared relationship\n",
    "\n",
    "III: it seems like there is a perfectly linear relationship between x and y escept for one datapoint. The datapoint has a significant impact on the resulting line. Linear regression is sensible to outliers\n",
    "\n",
    "IV: x only takes on two values and for one of those values the variation in y is quite high. We need variation in x in order for the model to be able to make sense.\n",
    "\n",
    "Our model kind of assumes that given X (the input features) y os deterministic."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.2) The formula\n",
    "\n",
    "$$\n",
    "\\hat{y} = w_0 + w_1 * x\n",
    "$$\n",
    "\n",
    "where $\\hat{y}$ is the models prediction of outcome y at point x.<br>\n",
    "$w_0$ and $w_1$ are called coefficients. $w_0$ is the **intercept** of the line and $w_1$ is the **slope** of the line.\n",
    "\n",
    "### 2.3) How do we determine $w_0$ and $w_1$?\n",
    "\n",
    "#### 2.3.1) We need a loss function\n",
    "\n",
    "The loss function of linear regression is the MSE (Mean Squared Error).\n",
    "\n",
    "$$\n",
    "MSE = \\frac{1}{n}\\sum_{i=1}^n(y_i - \\hat{y}_i)^2\n",
    "$$\n",
    "\n",
    "The task of the model is to minimize this MSE. This can be achieved in one of two ways.\n",
    "\n",
    "#### We have to calculate/estimate the coefficients\n",
    "\n",
    "1. Mathematically: Take the derivatives of the MSE with respect to the coefficients and set the derivatives to zero. The outcomes will be:\n",
    "\n",
    "$$\n",
    "w_0 = \\overline{y} - w_1 * \\overline{x}\n",
    "$$\n",
    "\n",
    "$$\n",
    "w_1 = \\frac{\\sum_{i=1}^n(x_i - \\overline{x})(y_i - \\overline{y})}{\\sum_{i=1}^n(x_i - \\overline{x})^2}\n",
    "$$\n",
    "\n",
    "2. Algorithmically: You will learn about Gradient Descent tomorrow.\n",
    "\n",
    "### 2.4) Interpretation of the parameters $w_0$ and $w_1$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.5) Multiple Linear Regression\n",
    "\n",
    "Multivariate Linear Regression describes the case in which we have more than one input feature. We can have multiple ones.\n",
    "\n",
    "With two input features for example the formula would just change to\n",
    "\n",
    "$$\n",
    "\\hat{y} = w_0 + w_1 * x_1 + w_2 * x_2\n",
    "$$\n",
    "\n",
    "and we would now fit a plane (the 3D equivalent of a line) to the data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3) Implementation in code\n",
    "\n",
    "### Example: The penguins are back!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('all_penguins_clean.csv', index_col=0)\n",
    "df.dropna(inplace=True)\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Let's try to predict Culmen Depth from Culmen Length"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make a plot for all species"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Choose one of the species"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the variable of interest y and the input feature"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Linear Regression with scikit-learn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Split the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## EDA\n",
    "\n",
    "- Task for the rest of the day"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature Engineering\n",
    "\n",
    "- You can start with this today using the methods you already know\n",
    "- Tomorrow you have an additional lecture on feature engineering"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fit the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fit the model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Evaluate/Optimize the model\n",
    "\n",
    "- What kind of evaluation metrics can we use?\n",
    "- You should do cross-validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Look at the training score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**R-squared**\n",
    "\n",
    "$$\n",
    "R^2 = 1 - \\frac{SSR}{SST} = \n",
    "      1- \\frac{\\sum_{i=1}^n(y_i - \\hat{y}_i)^2}{\\sum_{i=1}^n(y_i - \\overline{y})2}\n",
    "$$\n",
    "\n",
    "Can be interpreted as the **ratio of variance in y explained by the model**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make predictions for the training data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot the training data and the predictions for the training data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Test your model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
